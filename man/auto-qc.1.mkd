auto-qc(1) -- automated passing and failing of libraries
========================================================

## SYNOPSIS

`auto-qc` --analysis-file <ANALYSIS_FILE> --threshold-file <THRESHOLD_FILE>

## OPTIONS

  * `-a`, `--analysis-file` <ANALYSIS_FILE>:

    The path to the file containing the library metrics used for quality
    control.

  * `-t`, `--threshold-file` <THRESHOLD_FILE>:

    The path to the file containing the pass/fail thresholds for quality
    control of the library.

  * `-x`, `--text-output`:

    Generate human readable output of the quality control test.

## SYNTAX

### ANALYSIS FILE

The analysis file should contain a YAML dictionary with the keys `metadata` and
`data`. The `data` field is a freeform dictionary that can contain any
subdictionary with any fields. There is no restriction on the dictionary
structure or keys. Arrays are however not permitted. The `metadata` field has
one mandatory field `version`. The version number should match the version
number of auto-qc according to [semantic versioning][semver]. An example
analysis file is given below.

[semver]: http://semver.org

~~~ YAML
---
metadata:
  version: 2.0.0
data:
  bases:
    contaminants: 1392000
    initial: 1500000000
    non_contaminants: 1498608000
  metrics:
    percent_contamination: 0.1
  reads:
    contaminants: 9280
    initial: 10000000
    non_contaminants: 9990720
~~~

### THRESHOLD FILE

The threshold file specifies the QC criteria for pass or fail. This is a YAML
format dictionary contains two fields `metadata` and `thresholds`. These fields
are defined as:

  * **metadata** - This contains any metadata that you wish to associate with
    your threshold file. The field `metadata/version/auto-qc` is mandatory and
    is checked by auto-qc to determine if the QC threshold syntax matches that
    of the version of auto-qc according to [semantic versioning][semver].

  * **thresholds** - This field should contain a list of s-expressions. These
    s-expressions are lists defining the QC thresholds. The format of each
    threshold is:

    * **doc string** - (*optional*) A dictionary with documentation fields for
      the associated QC threshold. The allowed fields are: `name` `fail_msg`
      and `pass_msg`. The values of `fail_msg` and `pass_msg` are return in the
      standard out when the threshold fails. The `name` field is used to
      describe the QC tests.

    * **operator** - An operator to test the QC value. This may be mathematical
      comparison operators such as '>' or Boolean operators such as 'AND'. The
      list of allowed operators is described in the section below.

    * **analysis value** - The value from the analysis file that should be
      tested. The colon ':' indicates that this a reference to a value in the
      analysis file. The remainder of this string shows the path to the value
      to be tested.

    * **literal value** - A literal value that to compare with the reference
      value.

An example of a simple threshold file with two QC tests is given below. In this
example if both QC evaluations return TRUE then this will pass. If either
return FALSE then this will fail QC.

~~~ YAML
metadata:
  version:
    auto-qc: 1.0.0
thresholds:
- ['<', :metrics/percent_contamination, 2]
- ['<', :reads/contaminants, 1e6]
~~~

A more complex example uses `NOT` and `AND` to create a QC threshold that
fails only when both of the nested thresholds fail. Boolean operators can be
use arbitrarily to create more complex QC tests.

~~~ YAML
metadata:
  version:
    auto-qc: 1.0.0
thresholds:
- NOT
- - AND
  - - ['>', :metrics/percent_contamination, 2]
    - ['>', :reads/contaminants, 1e6]
~~~

A final example uses the optional *doc string* dictionary at the start of the
expression. This names the QC check an provides fail and pass messages that
provide more descriptive output to the user when using auto-qc. Values inside
`{}` braces are interpolated with their value in the QC threshold file.

~~~ YAML
metadata:
  version:
    auto-qc: 1.0.0
thresholds:
- name: Contamination test
  fail_msg: |
    Contains {metrics/percent_contamination}% contaminants and
    {reads/contaminants} contaminating reads indicating a high degree of
    sequencing contamination.
  pass_msg: Passes contamination QC check.
- NOT
- - AND
  - - ['>', :metrics/percent_contamination, 2]
    - ['>', :reads/contaminants, 1e6]
~~~

### AVAILABLE OPERATORS

**==** / **!=** - Test whether two values are equal or not.

    - ==
    - ':run_metadata/protocol
    - Low Input DNA

**>** / **<** / **>=** / **<=** - Test whether one numeric value is
greater/smaller than another.

    - '>'
    - ':human_contamination/metrics/percent_contamination
    - 5

**and** - Test whether two values are both true. The example here illustrates
that metrics can be nested. For instance here, the two arguments to the **and**
operator are themselves thresholds.

    - and
    -
      - greater_than
      - ':cat_contamination/metrics/percent_contamination'
      - 5
    -
      - greater_than
      - ':dog_contamination/metrics/percent_contamination'
      - 5

**or** - Test whether any values are true.

    - or
    -
      - greater_than
      - ':cat_contamination/metrics/percent_contamination'
      - 5
    -
      - greater_than
      - ':dog_contamination/metrics/percent_contamination'
      - 5

**not** - Flips the boolean value

      - not
      - :cat_contamination/is_contaminated'

**in** / **not_in** - Test whether a value is in a list of values. Note that
the list of values must begin with the **list** operator.

    - in
    - ':cat_contamination/name_of_cat'
    -
      - list
      - "Chase No Face"
      - "Colonel Meow"
      - "Felicette"
      - "Mrs. Chippy"
      - "Peter, the Lord's Cat"
      - "Tiddles"
      - "Wilberforce"

## AUTHOR

Michael Barton <mbarton@lbl.gov>

## HISTORY

* 1.1.0 - Mon 27 Apr 2015
* 1.0.0 - Fri 15 Aug 2014
* 0.2.1 - Tue 20 May 2014
* 0.2.0 - Mon 19 May 2014
* 0.1.0 - Thu 15 May 2014
