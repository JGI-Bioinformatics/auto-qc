auto-qc(1) -- automated passing and failing of libraries
========================================================

## SYNOPSIS

`auto-qc` --analysis-file <ANALYSIS_FILE> --threshold-file <THRESHOLD_FILE>

## OPTIONS

* `-a`, `--analysis-file` <ANALYSIS_FILE>:
The path to the file containing the library metrics used for quality control.

* `-t`, `--threshold-file` <THRESHOLD_FILE>:
The path to the file containing the pass/fail thresholds for quality control of the library.

* `-x`, `--text-output`:
Generate human readable output of the quality control test.

* `-y`, `--yaml-output`:
Generate YAML output of the quality control test.

## SYNTAX

### ANALYSIS FILE

The analysis file contains a YAML list of dictionaries. Each dictionary should
represent a discrete analysis type. An example analysis related to *E.coli*
contamination is as follows:

    - analysis: ecoli_contamination

      metadata:
        version:
          library-metrics: 0.4.3

      outputs:
        bases:
          contaminants: 1392000
          initial: 1500000000
          non_contaminants: 1498608000
        metrics:
          percent_contamination: 0.1
        reads:
          contaminants: 9280
          initial: 10000000
          non_contaminants: 9990720

This analysis entry contains three keys in the dictionary: analysis, metadata,
and outputs. These keys corresponding to the following:

* **analysis** - The name of the analysis. This should be unique to each
  analysis in the file, i.e. there should only be one entry with this name in
  each analysis file.

* **metadata** - Any associate metadata that you wish to include in the
  analysis. In the example above there is a version key which specifies the
  version of library metrics used to generate the analysis file. You add what
  ever data you think may be useful if you have to return in future and
  understand how the analysis was generated.

* **outputs** - The field contains the data you would like to test for QC.
  Under this should be all the values that related to QC metrics. In the
  example above there are fields related to number of contaminated bases,
  contaminated reads, and the calculated metrics.

### THRESHOLD FILE

The threshold file specifies the QC criteria for pass or fail. This file
contains two fields **metadata** and **thresholds** as shown below:

    metadata:
      version:
        auto-qc: 1.0.0

    thresholds:
    -
      - greater_than
      - ':ecoli_contamination/metrics/percent_contamination
      - 5

* **metadata** - This contains any metadata that you wish to associate with
  your threshold file. The metadata/version/auto-qc field is required as this
  is checked by auto-qc to determine if the QC threshold syntax matches that of
  the version of auto-qc.

* **thresholds** - This field should contain a list of threshold metrics. Each
  metric is itself a list also. In the example there is just one threshold
  which tests whether the percentage of contaminating *E.coli* DNA is not
  greater than 5. The format of each threshold metric should be the following:

  * **operator** - A mathematical operator to test the QC value. In the above
    case the operator is 'greater_than'. The list of allowed operators is
    described below.

  * **analysis_value** - The value from the analysis file that should be
    tested. The colon ':' indicates that this a reference to a value in the
    analysis file. The remainder of this string shows the path to the value to
    be tested. In the example this will file the analysis named
    'ecoli_contamination', then find the field 'metrics/percent_contamination'.

  * **literal_value** - This is a literal value that will be compared with the
    referenced analysis value.

### AVAILABLE OPERATORS

**equals** / **not_equals** - Test whether two values are equal or not.

    - equals
    - ':run_metadata/protocol
    - Low Input DNA

**greater_than** / **less_than** / **greater_equal_than** / **less_equal_than** - Test
whether one numeric value is greater/smaller than another.

    - greater_than
    - ':human_contamination/metrics/percent_contamination
    - 5

**and** - Test whether two values are both true. The example here illustrates
that metrics can be nested. For instance here, the two arguments to the **and**
operator are themselves thresholds.

    - and
    -
      - greater_than
      - ':cat_contamination/metrics/percent_contamination'
      - 5
    -
      - greater_than
      - ':dog_contamination/metrics/percent_contamination'
      - 5

**or** - Test whether any values are true.

    - or
    -
      - greater_than
      - ':cat_contamination/metrics/percent_contamination'
      - 5
    -
      - greater_than
      - ':dog_contamination/metrics/percent_contamination'
      - 5

**is_in** / **is_not_in** - Test whether a value is in a list of values. Note
that the list of values must begin with the **list** operator.

    - is_in
    - ':cat_contamination/name_of_cat'
    -
      - list
      - "Chase No Face"
      - "Colonel Meow"
      - "Felicette"
      - "Mrs. Chippy"
      - "Peter, the Lord's Cat"
      - "Tiddles"
      - "Wilberforce"

## AUTHOR

Michael Barton <mbarton@lbl.gov>

## HISTORY

* 1.1.0 - Mon 27 Apr 2015
* 1.0.0 - Fri 15 Aug 2014
* 0.2.1 - Tue 20 May 2014
* 0.2.0 - Mon 19 May 2014
* 0.1.0 - Thu 15 May 2014
